{"version":3,"sources":["webpack:///./src/components/add.todo.js","webpack:///./src/components/initial.task.js","webpack:///./src/components/task.js","webpack:///./src/components/use.custom.hook.js","webpack:///./src/index.js"],"names":["AddTodo","_ref","addTodo","react_default","a","createElement","className","onClick","initialTask","id","Date","now","content","isCompleted","Task","idx","task","isEditable","operations","handleTaskDeletion","handleTaskCompletion","handleTaskContentChange","setCurrentTaskEditable","taskContentInput","initialValue","_useState","useState","_useState2","_slicedToArray","value","setValue","onChange","e","currentTarget","useFormInput","taskCompletionCheckbox","_useState3","_useState4","checked","setChecked","useCheckBoxInput","checkbox","_extends","type","editMode","length","viewMode","propTypes","PropTypes","number","object","bool","ReactDOM","render","src_slicedToArray","todos","setTodos","useEffect","currentEditingTaskIndex","setCurrentEditingTaskIndex","taskOperations","filter","_","todoList","map","key","components_task","add_todo","push","document","getElementById"],"mappings":"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","file":"main.ade6.js","sourcesContent":["import React from \"react\";\n\nconst AddTodo = ({addTodo}) => {\n  return (\n    <div className=\"task add-btn-block\">\n      <span>+</span>\n      <button className=\"secondary-btn add-btn\" onClick={addTodo}>\n                Add todo\n      </button>\n    </div>\n  );\n};\n\nexport default AddTodo;\n","export const initialTask = [\n  {\n    id: Date.now(),\n    content: \"Add some todo by click button below\",\n    isCompleted: false\n  }\n];\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {useFormInput, useCheckBoxInput} from \"./use.custom.hook.js\";\n\nconst Task = ({idx, task, isEditable, operations}) => {\n  let {\n    handleTaskDeletion,\n    handleTaskCompletion,\n    handleTaskContentChange,\n    setCurrentTaskEditable\n  } = operations;\n\n  let {content, isCompleted} = task;\n  let taskContentInput = useFormInput(content);\n  let taskCompletionCheckbox = useCheckBoxInput(isCompleted);\n\n  function handleTaskCancel() {\n    // delete task if it hasn't been saved yet\n    if (!content.length) {\n      handleTaskDeletion(idx);\n    } else {\n      // update input content to todos\n      taskContentInput.onChange({currentTarget: {value: content}});\n    }\n    // disable editable\n    setCurrentTaskEditable(false);\n  }\n\n  function handleTaskSave() {\n    // if users type something\n    if (taskContentInput.value.length) {\n      handleTaskContentChange(taskContentInput.value, idx);\n    } else {\n      // if no input but has saved task content, recover it\n      if (task.content.length) {\n        taskContentInput.onChange({\n          currentTarget: {value: task.content}\n        });\n      } else {\n        return;\n      }\n    }\n    // disable editable\n    setCurrentTaskEditable(false);\n  }\n\n  let checkbox = (\n    <label className=\"container\">\n      <input\n        {...taskCompletionCheckbox}\n        onClick={() =>\n          handleTaskCompletion(!taskCompletionCheckbox.checked, idx)\n        }\n        type=\"checkbox\"\n      />\n      <div />\n    </label>\n  );\n\n  let editMode = (\n    <div className=\"edit-mode\">\n      <input {...taskContentInput} />\n      <div className=\"commands\">\n        <div>\n          <button className=\"primary-btn\" onClick={handleTaskSave}>\n                        Save\n          </button>\n          <button\n            className=\"secondary-btn\"\n            onClick={handleTaskCancel}>\n                        Cancel\n          </button>\n        </div>\n        <button\n          className=\"secondary-btn\"\n          onClick={() => handleTaskDeletion(idx)}>\n                    Delete\n        </button>\n      </div>\n    </div>\n  );\n\n  let viewMode = (\n    <div className=\"view-mode\">\n      {checkbox}\n      <div\n        className={task.isCompleted ? \"content completed\" : \"content\"}\n        onClick={() => setCurrentTaskEditable(idx)}>\n        {task.content}\n      </div>\n    </div>\n  );\n\n  return <div className=\"task\">{isEditable ? editMode : viewMode}</div>;\n};\n\nTask.propTypes = {\n  idx: PropTypes.number,\n  task: PropTypes.object,\n  isEditable: PropTypes.bool,\n  operations: PropTypes.object\n};\n\nexport default Task;\n","import { useState } from \"react\";\n\nexport const useFormInput = initialValue => {\n  const [value, setValue] = useState(initialValue);\n  function handleChange(e) {\n    setValue(e.currentTarget.value);\n  }\n  return {\n    value,\n    onChange: handleChange\n  };\n};\n \n\nexport const useCheckBoxInput = initialValue => {\n  const [checked, setChecked] = useState(initialValue);\n  function handleChange() {\n    setChecked(!checked);\n  }\n  return {\n    checked,\n    onChange: handleChange\n  };\n};\n\n","import \"typeface-roboto\";\nimport \"./style/reset.scss\";\nimport \"./style/main.scss\";\n\nimport React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport AddTodo from \"./components/add.todo.js\";\nimport { initialTask } from \"./components/initial.task.js\";\nimport Task from \"./components/task.js\";\n\nconst TodoList = () => {\n  // [task1, task2, task3]\n  const [todos, setTodos] = useState(initialTask);\n\n  useEffect(() => {\n    setTodos(todos);\n  }, [todos]);\n\n  // index of todos, default is false means no todos are editable\n  const [currentEditingTaskIndex, setCurrentEditingTaskIndex] = useState(false);\n\n  function handleTaskContentChange(content, idx) {\n    todos[idx][\"content\"] = content;\n    setTodos(todos);\n  }\n\n  function handleTaskCreation() {\n    // if already create one new task but not enter anything\n    if (todos.length && !todos[todos.length - 1].content.length) {\n      return;\n    }\n    todos.push({ id: Date.now(), content: \"\", isCompleted: false });\n    setTodos(todos);\n    setCurrentEditingTaskIndex(todos.length - 1);\n  }\n\n  function handleTaskCompletion(isCompleted, idx) {\n    todos[idx][\"isCompleted\"] = isCompleted;\n    setTodos(todos);\n  }\n\n  function handleTaskDeletion(idx) {\n    setTodos(todos.filter((_, id) => id !== idx));\n    setCurrentEditingTaskIndex(false);\n  }\n\n  let taskOperations = {\n    handleTaskDeletion: handleTaskDeletion,\n    handleTaskCompletion: handleTaskCompletion,\n    setCurrentTaskEditable: setCurrentEditingTaskIndex,\n    handleTaskContentChange: handleTaskContentChange\n  };\n\n  let todoList = todos.map((task, idx) => (\n    <div key={`${task.id}-${task.content}-${task.isCompleted}`}>\n      {\n        <Task\n          idx={idx}\n          isEditable={idx === currentEditingTaskIndex}\n          task={task}\n          operations={taskOperations}\n        />\n      }\n    </div>\n  ));\n\n  return (\n    <div>\n      <h1>Getting things done</h1>\n      {todoList}\n      <AddTodo addTodo={handleTaskCreation} />\n    </div>\n  );\n};\n\nReactDOM.render(<TodoList />, document.getElementById(\"main\"));\n"],"sourceRoot":""}